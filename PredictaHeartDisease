{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"http://charlestay.com/Animation5.gif\" width=100% title=\"A Header Image That We Have Designed & Added Using HTML\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<A HREF=\"https://www.drivendata.org/competitions/54/machine-learning-with-a-heart/\"><button>View Challenge on Driven Data</button></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Contents <a id='C'></a>\n",
    "\n",
    "<a href='#S1'><b>Step 1 - Preparing Libraries & Dataset</b></a>\n",
    "<p style=\"margin-left: 20px\">\n",
    "    <a href='#IL'>Importing Libraries</a></br>\n",
    "    <a href='#ID'>Importing Dataset</a></br>\n",
    "</p>\n",
    "\n",
    "<a href='#S2'><b>Step 2 - Data Exploration</b></a>\n",
    "<p style=\"margin-left: 20px\">\n",
    "    <a href='#AD'>Analyzing Our Data</a></br>\n",
    "    <a href='#VD'>Visualizing Our Data</a></br>\n",
    "</p>\n",
    "\n",
    "<a href='#S3'><b>Step 3 - Data Preparation</b></a>\n",
    "<p style=\"margin-left: 20px\">\n",
    "    <a href='#FS'>Feature Selection</a></br>\n",
    "    <a href='#FE'>Feature Engineer</a></br>\n",
    "</p>\n",
    "\n",
    "<a href='#S4'><b>Step 4 - Classification Models / ML Algorithms</b></a>\n",
    "<p style=\"margin-left: 20px\">\n",
    "    <a href='#KNN'>K-Nearest Neigbors (KNN)</a></br>\n",
    "    <a href='#LR'>Logistic Regression</a></br>\n",
    "    <a href='#GB'>Gradient Boosting</a></br>\n",
    "    <a href='#SVM'>Support Vector Machine (SVM)</a></br>\n",
    "    <a href='#DT'>Decision Tree</a></br>\n",
    "    <a href='#RF'>Random Forest</a></br>\n",
    "    <a href='#NB'>Naive Bayes</a></br>\n",
    "</p>\n",
    "\n",
    "<a href='#S5'><b>Step 5 - Evaluation</b></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1 - Preparing Libraries & Dataset <a id='S1'></a></br><a href='#C'><font size=2><i>(Back to Contents) â†‘</i></font></a>\n",
    "### <u>Importing Libraries</u> <a id='IL'></a>\n",
    "#### Import helpful libraries & give quick names to those libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Linear algebra\n",
    "import pandas as pd \n",
    "## Data processing\n",
    "import numpy as np \n",
    "\n",
    "# Visualization tools\n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "## Animation library\n",
    "import matplotlib.animation as animation\n",
    "\n",
    "# Data splitting & parameter tuning\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# ML models\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn import tree \n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.tree import export_graphviz\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "# Feature selection\n",
    "from sklearn.feature_selection import SelectPercentile, chi2\n",
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import chi2\n",
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "\n",
    "# Evaluation metrics\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import roc_curve, auc, roc_auc_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Further processing\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <u>Importing Dataset</u> <a id='ID'></a>\n",
    "#### The raw data from drivendata.org is in .dat file format. Rather than converting it to csv using Excel, we have decided to prep the .dat data file entirely using python.\n",
    "To do so, we import the file using Panda's read_csv function and separate each column with a space delimiter. Since the original .dat file does not contain any column headings, we assigned them manually and have included markups of what they are, how they are interpreted, as well as possible values to expect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>chest_pain_type</th>\n",
       "      <th>blood_pressure</th>\n",
       "      <th>chol</th>\n",
       "      <th>blood_sugar</th>\n",
       "      <th>rest_ecg</th>\n",
       "      <th>max_heart_rate</th>\n",
       "      <th>exercise_induced_angina</th>\n",
       "      <th>st_depression</th>\n",
       "      <th>st_slope</th>\n",
       "      <th>num_major_vessels</th>\n",
       "      <th>thalassemia</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>70.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>322.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>564.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  sex  chest_pain_type  blood_pressure   chol  blood_sugar  rest_ecg  \\\n",
       "0  70.0  1.0              4.0           130.0  322.0          0.0       2.0   \n",
       "1  67.0  0.0              3.0           115.0  564.0          0.0       2.0   \n",
       "\n",
       "   max_heart_rate  exercise_induced_angina  st_depression  st_slope  \\\n",
       "0           109.0                      0.0            2.4       2.0   \n",
       "1           160.0                      0.0            1.6       2.0   \n",
       "\n",
       "   num_major_vessels  thalassemia  target  \n",
       "0                3.0          3.0       2  \n",
       "1                0.0          7.0       1  "
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import the dataset and add headings to each column\n",
    "data = pd.read_csv('heart.dat', sep=' ', names = [\n",
    "        'age', ## age in years\n",
    "        'sex', ## 1 = male; 0 = female\n",
    "        'chest_pain_type', ## Chest pain type\n",
    "        'blood_pressure', ## resting blood pressure in mm Hg on admission to the hospital\n",
    "        'chol', ## serum cholestoral in mg/dl\n",
    "        'blood_sugar', ## fasting blood sugar > 120 mg/dl (1 = true; 0 = false)\n",
    "        'rest_ecg', ## resting electrocardiographic results\n",
    "        'max_heart_rate', ## maximum heart rate achieved\n",
    "        'exercise_induced_angina', ## 1 = yes; 0 = no\n",
    "        'st_depression', ## ST depression induced by exercise relative to rest\n",
    "        'st_slope', ## slope of the peak exercise ST segment\n",
    "        'num_major_vessels', ## number of major vessels (0-3) colored by flourosopy\n",
    "        'thalassemia', ## 3 = normal; 6 = fixed defect; 7 = reversable defect\n",
    "        'target']) ## target which is our label (1 = heart disease absent or 2 = present)\n",
    "\n",
    "# Show the first 2 lines to verify that we have imported the dataset correctly \n",
    "data.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>chest_pain_type</th>\n",
       "      <th>blood_pressure</th>\n",
       "      <th>chol</th>\n",
       "      <th>blood_sugar</th>\n",
       "      <th>rest_ecg</th>\n",
       "      <th>max_heart_rate</th>\n",
       "      <th>exercise_induced_angina</th>\n",
       "      <th>st_depression</th>\n",
       "      <th>st_slope</th>\n",
       "      <th>num_major_vessels</th>\n",
       "      <th>thalassemia</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>57.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>192.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>148.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269</th>\n",
       "      <td>67.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>286.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>108.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      age  sex  chest_pain_type  blood_pressure   chol  blood_sugar  rest_ecg  \\\n",
       "268  57.0  1.0              4.0           140.0  192.0          0.0       0.0   \n",
       "269  67.0  1.0              4.0           160.0  286.0          0.0       2.0   \n",
       "\n",
       "     max_heart_rate  exercise_induced_angina  st_depression  st_slope  \\\n",
       "268           148.0                      0.0            0.4       2.0   \n",
       "269           108.0                      1.0            1.5       2.0   \n",
       "\n",
       "     num_major_vessels  thalassemia  target  \n",
       "268                0.0          6.0       1  \n",
       "269                3.0          3.0       2  "
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the last 2 lines just to be sure!\n",
    "data.tail(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2 - Data Exploration <a id='S2'></a></br><a href='#C'><font size=2><i>(Back to Contents) â†‘</i></font></a>\n",
    "### <u>Analyzing our Data</u> <a id='AD'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>chest_pain_type</th>\n",
       "      <th>blood_pressure</th>\n",
       "      <th>chol</th>\n",
       "      <th>blood_sugar</th>\n",
       "      <th>rest_ecg</th>\n",
       "      <th>max_heart_rate</th>\n",
       "      <th>exercise_induced_angina</th>\n",
       "      <th>st_depression</th>\n",
       "      <th>st_slope</th>\n",
       "      <th>num_major_vessels</th>\n",
       "      <th>thalassemia</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.00000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "      <td>270.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>54.433333</td>\n",
       "      <td>0.677778</td>\n",
       "      <td>3.174074</td>\n",
       "      <td>131.344444</td>\n",
       "      <td>249.659259</td>\n",
       "      <td>0.148148</td>\n",
       "      <td>1.022222</td>\n",
       "      <td>149.677778</td>\n",
       "      <td>0.329630</td>\n",
       "      <td>1.05000</td>\n",
       "      <td>1.585185</td>\n",
       "      <td>0.670370</td>\n",
       "      <td>4.696296</td>\n",
       "      <td>1.444444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.109067</td>\n",
       "      <td>0.468195</td>\n",
       "      <td>0.950090</td>\n",
       "      <td>17.861608</td>\n",
       "      <td>51.686237</td>\n",
       "      <td>0.355906</td>\n",
       "      <td>0.997891</td>\n",
       "      <td>23.165717</td>\n",
       "      <td>0.470952</td>\n",
       "      <td>1.14521</td>\n",
       "      <td>0.614390</td>\n",
       "      <td>0.943896</td>\n",
       "      <td>1.940659</td>\n",
       "      <td>0.497827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>94.000000</td>\n",
       "      <td>126.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>48.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>213.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>133.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>130.000000</td>\n",
       "      <td>245.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>153.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.80000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>61.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>140.000000</td>\n",
       "      <td>280.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.60000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>77.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>564.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>202.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.20000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              age         sex  chest_pain_type  blood_pressure        chol  \\\n",
       "count  270.000000  270.000000       270.000000      270.000000  270.000000   \n",
       "mean    54.433333    0.677778         3.174074      131.344444  249.659259   \n",
       "std      9.109067    0.468195         0.950090       17.861608   51.686237   \n",
       "min     29.000000    0.000000         1.000000       94.000000  126.000000   \n",
       "25%     48.000000    0.000000         3.000000      120.000000  213.000000   \n",
       "50%     55.000000    1.000000         3.000000      130.000000  245.000000   \n",
       "75%     61.000000    1.000000         4.000000      140.000000  280.000000   \n",
       "max     77.000000    1.000000         4.000000      200.000000  564.000000   \n",
       "\n",
       "       blood_sugar    rest_ecg  max_heart_rate  exercise_induced_angina  \\\n",
       "count   270.000000  270.000000      270.000000               270.000000   \n",
       "mean      0.148148    1.022222      149.677778                 0.329630   \n",
       "std       0.355906    0.997891       23.165717                 0.470952   \n",
       "min       0.000000    0.000000       71.000000                 0.000000   \n",
       "25%       0.000000    0.000000      133.000000                 0.000000   \n",
       "50%       0.000000    2.000000      153.500000                 0.000000   \n",
       "75%       0.000000    2.000000      166.000000                 1.000000   \n",
       "max       1.000000    2.000000      202.000000                 1.000000   \n",
       "\n",
       "       st_depression    st_slope  num_major_vessels  thalassemia      target  \n",
       "count      270.00000  270.000000         270.000000   270.000000  270.000000  \n",
       "mean         1.05000    1.585185           0.670370     4.696296    1.444444  \n",
       "std          1.14521    0.614390           0.943896     1.940659    0.497827  \n",
       "min          0.00000    1.000000           0.000000     3.000000    1.000000  \n",
       "25%          0.00000    1.000000           0.000000     3.000000    1.000000  \n",
       "50%          0.80000    2.000000           0.000000     3.000000    1.000000  \n",
       "75%          1.60000    2.000000           1.000000     7.000000    2.000000  \n",
       "max          6.20000    3.000000           3.000000     7.000000    2.000000  "
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Summary Statistics of the dataset\n",
    "\n",
    "## Count - the number of non-empty rows in a column.\n",
    "## Mean - the mean value of that column.\n",
    "## Std - the Standard Deviation Value of that column.\n",
    "## Min - the minimum value.\n",
    "## 25%, 50%, and 75% - the percentile/quartile for each column.\n",
    "## Max - the maximum value.\n",
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### At First Glance...\n",
    "We can do some preliminary digging into the data here.  \n",
    "- One attribute that might be of interest but not present is weight (or BMI). This would be a good attribute to perform some analysis on.\n",
    "- By looking at the mean of our target value (1.44) we can see that less than half of the people in the dataset have heart disease.\n",
    "- Another data point that stands out is the age category. Age has a very high standard deviation (9).\n",
    "- We can see that there is a wide variety of ages spanning from 29 to 77.\n",
    "- Age is a data point we may want to look into dropping from the population if the younger ages begin to skew our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows in the dataset:  270\n",
      "Number of columns in the dataset:  14\n"
     ]
    }
   ],
   "source": [
    "# Determining number of rows and columns in the dataset\n",
    "print('Number of rows in the dataset: ',data.shape[0])\n",
    "print('Number of columns in the dataset: ',data.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 270 entries, 0 to 269\n",
      "Data columns (total 14 columns):\n",
      "age                        270 non-null float64\n",
      "sex                        270 non-null float64\n",
      "chest_pain_type            270 non-null float64\n",
      "blood_pressure             270 non-null float64\n",
      "chol                       270 non-null float64\n",
      "blood_sugar                270 non-null float64\n",
      "rest_ecg                   270 non-null float64\n",
      "max_heart_rate             270 non-null float64\n",
      "exercise_induced_angina    270 non-null float64\n",
      "st_depression              270 non-null float64\n",
      "st_slope                   270 non-null float64\n",
      "num_major_vessels          270 non-null float64\n",
      "thalassemia                270 non-null float64\n",
      "target                     270 non-null int64\n",
      "dtypes: float64(13), int64(1)\n",
      "memory usage: 29.6 KB\n"
     ]
    }
   ],
   "source": [
    "# The following step describes our data a little bit more in depth, showing us the type of data in each column and if we have missing values\n",
    "## Alternatively, we could use a combination of data.dtypes and data.isnull().sum() or heart.isnull().values.any() to perform the same task\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### To get an overview of the dataset (eg. range, mean), we generated a chart with 14 histograms (one for each variable/column):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting histogram for each variable (and we define the size we want the visualization to be)\n",
    "data.hist(figsize = (12, 12))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A Correlation Matrix is also a great way to explore and understand data relationships!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>chest_pain_type</th>\n",
       "      <th>blood_pressure</th>\n",
       "      <th>chol</th>\n",
       "      <th>blood_sugar</th>\n",
       "      <th>rest_ecg</th>\n",
       "      <th>max_heart_rate</th>\n",
       "      <th>exercise_induced_angina</th>\n",
       "      <th>st_depression</th>\n",
       "      <th>st_slope</th>\n",
       "      <th>num_major_vessels</th>\n",
       "      <th>thalassemia</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.094401</td>\n",
       "      <td>0.096920</td>\n",
       "      <td>0.273053</td>\n",
       "      <td>0.220056</td>\n",
       "      <td>0.123458</td>\n",
       "      <td>0.128171</td>\n",
       "      <td>-0.402215</td>\n",
       "      <td>0.098297</td>\n",
       "      <td>0.194234</td>\n",
       "      <td>0.159774</td>\n",
       "      <td>0.356081</td>\n",
       "      <td>0.106100</td>\n",
       "      <td>0.212322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sex</th>\n",
       "      <td>-0.094401</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.034636</td>\n",
       "      <td>-0.062693</td>\n",
       "      <td>-0.201647</td>\n",
       "      <td>0.042140</td>\n",
       "      <td>0.039253</td>\n",
       "      <td>-0.076101</td>\n",
       "      <td>0.180022</td>\n",
       "      <td>0.097412</td>\n",
       "      <td>0.050545</td>\n",
       "      <td>0.086830</td>\n",
       "      <td>0.391046</td>\n",
       "      <td>0.297721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chest_pain_type</th>\n",
       "      <td>0.096920</td>\n",
       "      <td>0.034636</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.043196</td>\n",
       "      <td>0.090465</td>\n",
       "      <td>-0.098537</td>\n",
       "      <td>0.074325</td>\n",
       "      <td>-0.317682</td>\n",
       "      <td>0.353160</td>\n",
       "      <td>0.167244</td>\n",
       "      <td>0.136900</td>\n",
       "      <td>0.225890</td>\n",
       "      <td>0.262659</td>\n",
       "      <td>0.417436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>blood_pressure</th>\n",
       "      <td>0.273053</td>\n",
       "      <td>-0.062693</td>\n",
       "      <td>-0.043196</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.173019</td>\n",
       "      <td>0.155681</td>\n",
       "      <td>0.116157</td>\n",
       "      <td>-0.039136</td>\n",
       "      <td>0.082793</td>\n",
       "      <td>0.222800</td>\n",
       "      <td>0.142472</td>\n",
       "      <td>0.085697</td>\n",
       "      <td>0.132045</td>\n",
       "      <td>0.155383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chol</th>\n",
       "      <td>0.220056</td>\n",
       "      <td>-0.201647</td>\n",
       "      <td>0.090465</td>\n",
       "      <td>0.173019</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.025186</td>\n",
       "      <td>0.167652</td>\n",
       "      <td>-0.018739</td>\n",
       "      <td>0.078243</td>\n",
       "      <td>0.027709</td>\n",
       "      <td>-0.005755</td>\n",
       "      <td>0.126541</td>\n",
       "      <td>0.028836</td>\n",
       "      <td>0.118021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>blood_sugar</th>\n",
       "      <td>0.123458</td>\n",
       "      <td>0.042140</td>\n",
       "      <td>-0.098537</td>\n",
       "      <td>0.155681</td>\n",
       "      <td>0.025186</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.053499</td>\n",
       "      <td>0.022494</td>\n",
       "      <td>-0.004107</td>\n",
       "      <td>-0.025538</td>\n",
       "      <td>0.044076</td>\n",
       "      <td>0.123774</td>\n",
       "      <td>0.049237</td>\n",
       "      <td>-0.016319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rest_ecg</th>\n",
       "      <td>0.128171</td>\n",
       "      <td>0.039253</td>\n",
       "      <td>0.074325</td>\n",
       "      <td>0.116157</td>\n",
       "      <td>0.167652</td>\n",
       "      <td>0.053499</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.074628</td>\n",
       "      <td>0.095098</td>\n",
       "      <td>0.120034</td>\n",
       "      <td>0.160614</td>\n",
       "      <td>0.114368</td>\n",
       "      <td>0.007337</td>\n",
       "      <td>0.182091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max_heart_rate</th>\n",
       "      <td>-0.402215</td>\n",
       "      <td>-0.076101</td>\n",
       "      <td>-0.317682</td>\n",
       "      <td>-0.039136</td>\n",
       "      <td>-0.018739</td>\n",
       "      <td>0.022494</td>\n",
       "      <td>-0.074628</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.380719</td>\n",
       "      <td>-0.349045</td>\n",
       "      <td>-0.386847</td>\n",
       "      <td>-0.265333</td>\n",
       "      <td>-0.253397</td>\n",
       "      <td>-0.418514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exercise_induced_angina</th>\n",
       "      <td>0.098297</td>\n",
       "      <td>0.180022</td>\n",
       "      <td>0.353160</td>\n",
       "      <td>0.082793</td>\n",
       "      <td>0.078243</td>\n",
       "      <td>-0.004107</td>\n",
       "      <td>0.095098</td>\n",
       "      <td>-0.380719</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.274672</td>\n",
       "      <td>0.255908</td>\n",
       "      <td>0.153347</td>\n",
       "      <td>0.321449</td>\n",
       "      <td>0.419303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>st_depression</th>\n",
       "      <td>0.194234</td>\n",
       "      <td>0.097412</td>\n",
       "      <td>0.167244</td>\n",
       "      <td>0.222800</td>\n",
       "      <td>0.027709</td>\n",
       "      <td>-0.025538</td>\n",
       "      <td>0.120034</td>\n",
       "      <td>-0.349045</td>\n",
       "      <td>0.274672</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.609712</td>\n",
       "      <td>0.255005</td>\n",
       "      <td>0.324333</td>\n",
       "      <td>0.417967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>st_slope</th>\n",
       "      <td>0.159774</td>\n",
       "      <td>0.050545</td>\n",
       "      <td>0.136900</td>\n",
       "      <td>0.142472</td>\n",
       "      <td>-0.005755</td>\n",
       "      <td>0.044076</td>\n",
       "      <td>0.160614</td>\n",
       "      <td>-0.386847</td>\n",
       "      <td>0.255908</td>\n",
       "      <td>0.609712</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.109498</td>\n",
       "      <td>0.283678</td>\n",
       "      <td>0.337616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>num_major_vessels</th>\n",
       "      <td>0.356081</td>\n",
       "      <td>0.086830</td>\n",
       "      <td>0.225890</td>\n",
       "      <td>0.085697</td>\n",
       "      <td>0.126541</td>\n",
       "      <td>0.123774</td>\n",
       "      <td>0.114368</td>\n",
       "      <td>-0.265333</td>\n",
       "      <td>0.153347</td>\n",
       "      <td>0.255005</td>\n",
       "      <td>0.109498</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.255648</td>\n",
       "      <td>0.455336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>thalassemia</th>\n",
       "      <td>0.106100</td>\n",
       "      <td>0.391046</td>\n",
       "      <td>0.262659</td>\n",
       "      <td>0.132045</td>\n",
       "      <td>0.028836</td>\n",
       "      <td>0.049237</td>\n",
       "      <td>0.007337</td>\n",
       "      <td>-0.253397</td>\n",
       "      <td>0.321449</td>\n",
       "      <td>0.324333</td>\n",
       "      <td>0.283678</td>\n",
       "      <td>0.255648</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.525020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>target</th>\n",
       "      <td>0.212322</td>\n",
       "      <td>0.297721</td>\n",
       "      <td>0.417436</td>\n",
       "      <td>0.155383</td>\n",
       "      <td>0.118021</td>\n",
       "      <td>-0.016319</td>\n",
       "      <td>0.182091</td>\n",
       "      <td>-0.418514</td>\n",
       "      <td>0.419303</td>\n",
       "      <td>0.417967</td>\n",
       "      <td>0.337616</td>\n",
       "      <td>0.455336</td>\n",
       "      <td>0.525020</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              age       sex  chest_pain_type  blood_pressure  \\\n",
       "age                      1.000000 -0.094401         0.096920        0.273053   \n",
       "sex                     -0.094401  1.000000         0.034636       -0.062693   \n",
       "chest_pain_type          0.096920  0.034636         1.000000       -0.043196   \n",
       "blood_pressure           0.273053 -0.062693        -0.043196        1.000000   \n",
       "chol                     0.220056 -0.201647         0.090465        0.173019   \n",
       "blood_sugar              0.123458  0.042140        -0.098537        0.155681   \n",
       "rest_ecg                 0.128171  0.039253         0.074325        0.116157   \n",
       "max_heart_rate          -0.402215 -0.076101        -0.317682       -0.039136   \n",
       "exercise_induced_angina  0.098297  0.180022         0.353160        0.082793   \n",
       "st_depression            0.194234  0.097412         0.167244        0.222800   \n",
       "st_slope                 0.159774  0.050545         0.136900        0.142472   \n",
       "num_major_vessels        0.356081  0.086830         0.225890        0.085697   \n",
       "thalassemia              0.106100  0.391046         0.262659        0.132045   \n",
       "target                   0.212322  0.297721         0.417436        0.155383   \n",
       "\n",
       "                             chol  blood_sugar  rest_ecg  max_heart_rate  \\\n",
       "age                      0.220056     0.123458  0.128171       -0.402215   \n",
       "sex                     -0.201647     0.042140  0.039253       -0.076101   \n",
       "chest_pain_type          0.090465    -0.098537  0.074325       -0.317682   \n",
       "blood_pressure           0.173019     0.155681  0.116157       -0.039136   \n",
       "chol                     1.000000     0.025186  0.167652       -0.018739   \n",
       "blood_sugar              0.025186     1.000000  0.053499        0.022494   \n",
       "rest_ecg                 0.167652     0.053499  1.000000       -0.074628   \n",
       "max_heart_rate          -0.018739     0.022494 -0.074628        1.000000   \n",
       "exercise_induced_angina  0.078243    -0.004107  0.095098       -0.380719   \n",
       "st_depression            0.027709    -0.025538  0.120034       -0.349045   \n",
       "st_slope                -0.005755     0.044076  0.160614       -0.386847   \n",
       "num_major_vessels        0.126541     0.123774  0.114368       -0.265333   \n",
       "thalassemia              0.028836     0.049237  0.007337       -0.253397   \n",
       "target                   0.118021    -0.016319  0.182091       -0.418514   \n",
       "\n",
       "                         exercise_induced_angina  st_depression  st_slope  \\\n",
       "age                                     0.098297       0.194234  0.159774   \n",
       "sex                                     0.180022       0.097412  0.050545   \n",
       "chest_pain_type                         0.353160       0.167244  0.136900   \n",
       "blood_pressure                          0.082793       0.222800  0.142472   \n",
       "chol                                    0.078243       0.027709 -0.005755   \n",
       "blood_sugar                            -0.004107      -0.025538  0.044076   \n",
       "rest_ecg                                0.095098       0.120034  0.160614   \n",
       "max_heart_rate                         -0.380719      -0.349045 -0.386847   \n",
       "exercise_induced_angina                 1.000000       0.274672  0.255908   \n",
       "st_depression                           0.274672       1.000000  0.609712   \n",
       "st_slope                                0.255908       0.609712  1.000000   \n",
       "num_major_vessels                       0.153347       0.255005  0.109498   \n",
       "thalassemia                             0.321449       0.324333  0.283678   \n",
       "target                                  0.419303       0.417967  0.337616   \n",
       "\n",
       "                         num_major_vessels  thalassemia    target  \n",
       "age                               0.356081     0.106100  0.212322  \n",
       "sex                               0.086830     0.391046  0.297721  \n",
       "chest_pain_type                   0.225890     0.262659  0.417436  \n",
       "blood_pressure                    0.085697     0.132045  0.155383  \n",
       "chol                              0.126541     0.028836  0.118021  \n",
       "blood_sugar                       0.123774     0.049237 -0.016319  \n",
       "rest_ecg                          0.114368     0.007337  0.182091  \n",
       "max_heart_rate                   -0.265333    -0.253397 -0.418514  \n",
       "exercise_induced_angina           0.153347     0.321449  0.419303  \n",
       "st_depression                     0.255005     0.324333  0.417967  \n",
       "st_slope                          0.109498     0.283678  0.337616  \n",
       "num_major_vessels                 1.000000     0.255648  0.455336  \n",
       "thalassemia                       0.255648     1.000000  0.525020  \n",
       "target                            0.455336     0.525020  1.000000  "
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generating a correlation matrix that indicates what variables in the dataset are more highly correlated with heart disease \n",
    "data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1cb553ec630>"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We can also visualize the correlation matrix on a heatmap from the seaborn library\n",
    "sns.set_style('whitegrid')\n",
    "plt.figure(figsize=(14,8))\n",
    "sns.heatmap(data.corr(), annot = True, cmap='coolwarm',linewidths=.1)\n",
    "# linewidths space the blocks from one another to make the correlation table more legible\n",
    "# The seaborn package offers a visually pleasing coorelation matrix\n",
    "# The coolwarm cmap indicates that the darker the block the more significant the variable is in predicting each attribute"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Observations...\n",
    "- Compared to the table visualization, a heatmap offers a better way to quickly examine correlation (via different colors and shades of colors).\n",
    "- The classification problem we are attempting to understand is: what attributes are driving heart disease.\n",
    "- The correlation table helps narrow our scope of attributes to examine which features in the dataset correlate with heart disease.\n",
    "- The matrix indicates that: 'chest_pain_type', 'max_heart_rate', 'exercise_induced_angina', 'st_depression', 'num_major_vessels', and 'thalassemia' are the top 6 indicators of heart disease in this dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <u>Visualizing our Data</u> <a id='VD'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Finding #1: 120 people in our dataset have heart disease while 150 people do not have heart disease."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    150\n",
      "2    120\n",
      "Name: target, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Determining Target count (our target variable is represented by a binary variable - 1: HEART DISEASE ABSENT; 2: HEART DISEASE PRESENT)\n",
    "sns.countplot(x=\"target\", data=data) ## Visualizing using a histogram\n",
    "plt.show()\n",
    "print(data.target.value_counts()) ## Printing the count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Finding #2: The majority of data population falls in the range of 40-65.\n",
    "\n",
    "Although age did not have a high correlation coefficient (from our correlation table), we wanted to dive deeper on this specific variable as our initial hypothesis was rooted in the idea that old age drives higher rates of heart disease."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Min Age : 29.0\n",
      "Max Age : 77.0\n",
      "Mean Age : 54.43333333333333\n"
     ]
    }
   ],
   "source": [
    "# Visualizing the Age distribution of our dataset\n",
    "sns.distplot(data['age'], bins=10, kde=False) ## histogram with 10 bins and kde=false means NOT plotting a gaussian kernel density estimate\n",
    "plt.xlabel('Age') ## Horizontal Axis Label\n",
    "plt.ylabel('Age Count') ## Vertical Axis Label\n",
    "plt.title('Age Analysis') ## Plot Title\n",
    "plt.show()\n",
    "\n",
    "## Printing the minimum, maximum, and mean age\n",
    "minage=min(data.age)\n",
    "maxage=max(data.age)\n",
    "meanage=data.age.mean()\n",
    "print('Min Age :',minage)\n",
    "print('Max Age :',maxage)\n",
    "print('Mean Age :',meanage)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Finding #3: Approximately two-thirds of the data population are male.\n",
    "\n",
    "It seems like this dataset is skewed much more heavily towards males."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of males: 67.778\n",
      "Percentage of females: 32.222\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Printing percentages of males and females\n",
    "total = len(data[\"sex\"])\n",
    "males = data[\"sex\"].sum() ## Number of males\n",
    "females = len(data[\"sex\"]) - males ## Number of females = Total number of sexes - Number of Males\n",
    "print(\"Percentage of males:\", round(males/total*100, 3)) ## the value 3 refers to 3 decimal places\n",
    "print(\"Percentage of females:\", round(females/total*100, 3))\n",
    "\n",
    "# Plotting on a piechart\n",
    "plt.figure(figsize=(8,6)) ##figsize is the size used to plot the piechart\n",
    "plt.pie([males,females], labels=['Males', 'Females'], colors=['skyblue', 'yellowgreen'],autopct='%1.1f%%', textprops={'fontsize': 18}, shadow=True, startangle=90)\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Finding #4: Not a huge disparity (count of heart disease) in males compared to females."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Sex')"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the distribution of heart disease by sex using a histogram (0: Females; 1: Males)\n",
    "sex_graph = sns.countplot(data[\"sex\"], hue=data[\"target\"])\n",
    "sex_graph.set_ylabel(\"Count\")\n",
    "sex_graph.set_xlabel(\"Sex\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Finding #5: Majority of our data/sample population has Type 4 (ie. asymptomatic) chest pain type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count')"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Visualizing distribution of chest pain types using a histogram (4 types of chest pain type in dataset)\n",
    "cp_graph = sns.countplot(data[\"chest_pain_type\"])\n",
    "cp_graph.set_xlabel(\"Chest Pain Type\")\n",
    "cp_graph.set_ylabel(\"Count\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Finding #6: Majority of our data/sample population has a Thalassemia value of 3 (ie. normal)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEICAYAAACwDehOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAAFshJREFUeJzt3X9QFPf9x/HXwclF+aFD/THN6DnBHy2mdbRaIFWptjo003Y6MQaUDNGpdqJjTDBpAhpFU2vRGBkbWovRqU4glmA0jUnbtIoZUalEaZWEnjWajN+i4o8IlTvNesB+/8jk0xpNXFLvTuH5+Iu7PXffw7I83eV+uGzbtgUAgKSoSA8AALh1EAUAgEEUAAAGUQAAGEQBAGAQBQCAQRQAAAZRAAAYRAEAYLgjPUBHHTp0SB6PJ9JjAMBtxbIsjRgx4oaPu+2i4PF4lJycHOkxAOC24vP5HD2Oy0cAAIMoAAAMogAAMIgCAMAgCgAAgygAAAyiAAAwiAIAwCAKAACjU0fBCrZFeoROj+8x0Lncdm9z0RGebtEa9eSLkR6jU6td9VCkRwBwE3XqMwUAQMcQBQCAQRQAAAZRAAAYRAEAYBAFAIBBFAAABlEAABhEAQBgEAUAgEEUAABGyKJw+PBh5eTkXHXf66+/rqysLHO7oqJCkydPVmZmpt56661QjQIAcCgkb4i3fv16bd++Xd27dzf3+Xw+vfLKK7JtW5J07tw5lZaWauvWrbIsS9nZ2RozZoxiYmJCMRIAwIGQnCl4vV4VFxeb201NTXruuee0cOFCc19dXZ1GjhypmJgYxcfHy+v16siRI6EYBwDgUEjOFDIyMtTQ0CBJamtr09NPP62FCxfK4/GYx/j9fsXHx5vbsbGx8vv9N1y3ZVny+XyO5khOTu7g5PginO4PALe+kH+eQn19vU6cOKGlS5fKsiwdO3ZMy5cvV1pamgKBgHlcIBC4KhKfxePx8Mv+FsP+AG59Tv/zFvIoDB8+XH/4wx8kSQ0NDXr88cf19NNP69y5c1qzZo0sy9KVK1d0/PhxDR06NNTjAAA+R8Q+ea1Pnz7KyclRdna2bNvW/Pnzr7q8BAAIP5f9ydOBbhM+n69Dlyv4OM7Q4uM4gduD09+dvHgNAGAQBQCAQRQAAAZRAAAYRAEAYBAFAIBBFAAABlEAABhEAQBgEAUAgEEUAAAGUQAAGEQBAGAQBQCAQRQAAAZRAAAYRAEAYBAFAIBBFAAARsiicPjwYeXk5Ej6+LNBs7OzlZOTo5kzZ+r8+fOSpIqKCk2ePFmZmZl66623QjUKAMAhdyhWun79em3fvl3du3eXJC1fvlyLFy9WcnKyysvLtX79es2aNUulpaXaunWrLMtSdna2xowZo5iYmFCMBABwICRnCl6vV8XFxeZ2UVGRkpOTJUltbW3yeDyqq6vTyJEjFRMTo/j4eHm9Xh05ciQU4wAAHArJmUJGRoYaGhrM7b59+0qS/va3v6msrEwvvfSS9uzZo/j4ePOY2NhY+f3+G67bsiz5fD5Hc3wSIoSW0/0B4NYXkihczx//+Ef95je/0QsvvKDExETFxcUpEAiY5YFA4KpIfBaPx8Mv+1sM+wO49Tn9z1tYnn302muvqaysTKWlpRowYIAkafjw4aqtrZVlWWppadHx48c1dOjQcIwDAPgMIT9TaGtr0/Lly/XlL39Z8+bNkyR985vf1KOPPqqcnBxlZ2fLtm3Nnz9fHo8n1OMAAD6Hy7ZtO9JDdITP5+vQ5YpRT74YwmlQu+qhSI8AwAGnvzt58RoAwCAKAACDKAAADKIAADCIAgDAIAoAAIMoAAAMogAAMIgCAMAgCgAAgygAAAyiAAAwiAIAwCAKAACDKAAADKIAADCIAgDAIAoAbjqr1Yr0CF1CKL7PIf+MZgBdj8ft0ZjiMZEeo9PbN2/fTV9nyM4UDh8+rJycHEnSiRMnNG3aNGVnZ2vJkiVqb2+XJP3qV7/SlClTNHXqVNXV1YVqFACAQyGJwvr167Vo0SJZ1senNoWFhcrNzdXmzZtl27YqKytVX1+vt99+W1u2bFFRUZGeeeaZUIwCAOiAkETB6/WquLjY3K6vr1dKSookKT09XdXV1aqtrdXYsWPlcrl05513qq2tTRcuXAjFOAAAh0IShYyMDLnd//lzhW3bcrlckqTY2Fi1tLTI7/crLi7OPOaT+wEAkROWPzRHRf2nPYFAQAkJCYqLi1MgELjq/vj4+Buuy7Is+Xw+R9tNTk7u+LDoMKf7A10Hx1743OzjLyxRGDZsmGpqapSamqqqqiqlpaXJ6/Vq1apVmjlzphobG9Xe3q7ExMQbrsvj8fADd4thfwCR4/T4cxqPsEQhLy9PixcvVlFRkZKSkpSRkaHo6GiNHj1aWVlZam9vV0FBQThGAQB8jpBFoX///qqoqJAk3XXXXSorK7vmMfPmzdO8efNCNQIAoIN4RTMAwCAKAACDKAAADKIAADCIAgDAIAoAAIMoAAAMogAAMIgCAMAgCgAAgygAAAyiAAAwiAIAwHAUhS1btlx1+8UXXwzJMACAyPrct85+4403tGvXLtXU1Gj//v2SpLa2Nr333nt66KGHwjIgACB8PjcK48aNU58+fdTc3KysrCxJH3+05oABA8IyHAAgvD43Cj179lRqaqpSU1P14YcfyrIsSR+fLQAAOh9Hn7z2zDPPaPfu3erbt69s25bL5VJ5eXmoZwMAhJmjKBw+fFg7d+5UVBRPVgKAzszRb/mBAweaS0cAgM7L0ZnC6dOnNWHCBA0cOFCSvtDlo2AwqPz8fJ08eVJRUVFatmyZ3G638vPz5XK5NGTIEC1ZsoSzEQCIIEdRWL169f+8od27d6u1tVXl5eXat2+f1qxZo2AwqNzcXKWmpqqgoECVlZWaNGnS/7wtAMAX4ygKr7766jX3PfLIIx3a0F133aW2tja1t7fL7/fL7Xbr0KFDSklJkSSlp6dr3759RAEAIshRFHr37i1Jsm1b//jHP9Te3t7hDfXo0UMnT57Uvffeq6amJpWUlOjAgQNyuVySpNjYWLW0tNxwPZZlyefzOdpmcnJyh+dExzndH+g6OPbC52Yff46iMHXq1Ktuz5o1q8Mb2rRpk8aOHasnnnhCp0+f1vTp0xUMBs3yQCCghISEG67H4/HwA3eLYX8AkeP0+HMaD0dR+OCDD8zX586d0+nTpx2t/L8lJCSoW7dukj5+UVxra6uGDRummpoapaamqqqqSmlpaR1eLwDg5nEUhYKCAvO1x+PRU0891eENzZgxQwsXLlR2draCwaDmz5+vr33ta1q8eLGKioqUlJSkjIyMDq8XAHDzOIpCaWmpmpqa9K9//Uv9+/dXYmJihzcUGxurX/7yl9fcX1ZW1uF1AQBCw9GLAv70pz9p6tSpKikpUVZWll577bVQzwUAiABHZwqbNm3Stm3bFBsbK7/fr+nTp+tHP/pRqGcDAISZozMFl8ul2NhYSVJcXJw8Hk9IhwIARIajMwWv16sVK1Zo9OjRqq2tldfrDfVcAIAIcHSmkJmZqZ49e6q6ulrbtm3Tgw8+GOq5AAAR4CgKK1as0KRJk1RQUKBXXnlFK1asCPVcAIAIcBQFt9utwYMHS5IGDBjAO5kCQCfl6G8Kd955p4qKijRixAjV1dWpb9++oZ4LABABjv7LX1hYqMTERO3evVuJiYkqLCwM9VwAgAhwdKbg8Xg0Y8aMEI8CAIg0/jgAADCIAgDAIAoAAIMoAAAMogAAMIgCAMAgCgAAgygAAAyiAAAwHL2i+WZZt26ddu3apWAwqGnTpiklJUX5+flyuVwaMmSIlixZwpvtAUAEhe03cE1Njf7+97/rd7/7nUpLS9XY2KjCwkLl5uZq8+bNsm1blZWV4RoHAHAdYYvC3r17NXToUM2dO1ezZ8/W+PHjVV9fr5SUFElSenq6qqurwzUOAOA6wnb5qKmpSadOnVJJSYkaGho0Z84c2bYtl8slSYqNjVVLS8sN12NZlnw+n6NtJicn/08zwxmn+wNdB8de+Nzs4y9sUejVq5eSkpIUExOjpKQkeTweNTY2muWBQEAJCQk3XI/H4+EH7hbD/gAix+nx5zQeYbt8NGrUKO3Zs0e2bevMmTO6fPmy7rnnHtXU1EiSqqqqNHr06HCNAwC4jrCdKUyYMEEHDhzQlClTZNu2CgoK1L9/fy1evFhFRUVKSkpSRkZGuMYBAFxHWJ+S+tRTT11zX1lZWThHAAB8Dl4UAAAwiAIAwCAKAACDKAAADKIAADCIAgDAIAoAAIMoAAAMogAAMIgCAMAgCgAAgygAAAyiAAAwiAIAwCAKAACDKAAADKIAADCIAgDAIAoAACPsUfjwww/17W9/W8ePH9eJEyc0bdo0ZWdna8mSJWpvbw/3OACA/xLWKASDQRUUFOiOO+6QJBUWFio3N1ebN2+WbduqrKwM5zgAgE8JaxRWrlypqVOnqm/fvpKk+vp6paSkSJLS09NVXV0dznEAAJ/iDteGtm3bpsTERI0bN04vvPCCJMm2bblcLklSbGysWlpabrgey7Lk8/kcbTM5OfmLDwzHnO4PdB0ce+Fzs4+/sEVh69atcrlc+utf/yqfz6e8vDxduHDBLA8EAkpISLjhejweDz9wtxj2BxA5To8/p/EIWxReeukl83VOTo6WLl2qVatWqaamRqmpqaqqqlJaWlq4xgEAXEdEn5Kal5en4uJiZWVlKRgMKiMjI5LjAECXF7Yzhf9WWlpqvi4rK4vECACA6+DFawAAgygAAAyiAAAwiAIAwCAKAACDKAAADKIAADCIAgDAIAoAAIMoAAAMogAAMIgCAMAgCgAAgygAAAyiAAAwiAIAwCAKAACDKAAADKIAADDC9hnNwWBQCxcu1MmTJ3XlyhXNmTNHgwcPVn5+vlwul4YMGaIlS5YoKopOAUCkhC0K27dvV69evbRq1So1NTXpvvvu01e/+lXl5uYqNTVVBQUFqqys1KRJk8I1EgDgU8L23/Lvfe97euyxx8zt6Oho1dfXKyUlRZKUnp6u6urqcI0DALiOsEUhNjZWcXFx8vv9evTRR5WbmyvbtuVyuczylpaWcI0DALiOsF0+kqTTp09r7ty5ys7O1g9/+EOtWrXKLAsEAkpISLjhOizLks/nc7S95OTkLzwrnHO6P9B1cOyFz80+/sIWhfPnz+vHP/6xCgoKdM8990iShg0bppqaGqWmpqqqqkppaWk3XI/H4+EH7hbD/gAix+nx5zQeYbt8VFJSoosXL2rt2rXKyclRTk6OcnNzVVxcrKysLAWDQWVkZIRrHADAdYTtTGHRokVatGjRNfeXlZWFawQAwA3wogAAgEEUAAAGUQAAGEQBAGAQBdyy7FYr0iN0enyP8WlhffEa0BEut0f/97OvR3qMTs1b8E6kR8AthjMFAIBBFAAABlEAABhEAQBgEAUAgEEUAAAGUQAAGEQBAGAQBQCAQRQAAAZRAAAYRAEAYBAFAIBBFAAARsTfOru9vV1Lly7VP//5T8XExOjnP/+5Bg4cGOmxAKBLiviZws6dO3XlyhW9/PLLeuKJJ7RixYpIjwQAXVbEo1BbW6tx48ZJkkaMGKF33303whMBQNcV8ctHfr9fcXFx5nZ0dLRaW1vldl9/NMuy5PP5HK+/7Mff/J9nxGfryL74Qh6oCO36u7hQ7r8NEzeEbN34WEf2n2U5++jViEchLi5OgUDA3G5vb//MIEgfn00AAEIj4pePvvGNb6iqqkqSdOjQIQ0dOjTCEwFA1+WybduO5ACfPPvo6NGjsm1bv/jFLzRo0KBIjgQAXVbEowAAuHVE/PIRAODWQRQAAEbEn33UFbW1tWnRokX64IMPFB0drcLCQnm9XrN8165d+vWvfy232637779fmZmZEZwW17Nu3Trt2rVLwWBQ06ZN0wMPPGCWsf9ubdu2bdOrr74q6T9Pcd+3b58SEhIkSRUVFSovL5fb7dacOXM0YcKESI4bfjbCbseOHXZ+fr5t27a9f/9+e/bs2WbZlStX7IkTJ9rNzc22ZVn25MmT7bNnz0ZqVFzH/v377Ycffthua2uz/X6//fzzz5tl7L/by9KlS+3y8nJz++zZs/YPfvAD27Is++LFi+brroTLRxEwceJELVu2TJJ06tQp9e7d2yw7fvy4vF6vevbsqZiYGI0aNUoHDx6M1Ki4jr1792ro0KGaO3euZs+erfHjx5tl7L/bxzvvvKNjx44pKyvL3FdXV6eRI0cqJiZG8fHx8nq9OnLkSASnDD8uH0WI2+1WXl6eduzYoeeff97c7/f7FR8fb27HxsbK7/dHYkR8hqamJp06dUolJSVqaGjQnDlz9Oabb8rlcrH/biPr1q3T3Llzr7qP/ccfmiNq5cqV+vOf/6zFixfr0qVLkq59hXcgELjqhxSR16tXL40dO1YxMTFKSkqSx+PRhQsXJLH/bhcXL17U+++/r7S0tKvuZ/8RhYj4/e9/r3Xr1kmSunfvLpfLpejoaEnSoEGDdOLECTU3N+vKlSs6ePCgRo4cGclx8SmjRo3Snj17ZNu2zpw5o8uXL6tXr16S2H+3iwMHDuhb3/rWNfcPHz5ctbW1sixLLS0tOn78eJd7lwVevBYBly5d0oIFC3T+/Hm1trbqJz/5iS5fvqxLly4pKyvLPHvFtm3df//9evDBByM9Mj7l2WefVU1NjWzb1vz589Xc3Mz+u41s2LBBbrdbM2bMkCRt3LhRXq9X3/3ud1VRUaGXX35Ztm3r4YcfVkZGRmSHDTOiAAAwuHwEADCIAgDAIAoAAIMoAAAMogAAMHhFMzo9y7K0fft2NTY2qnfv3po2bdoN/822bdv0/vvv66c//WkYJrxWVVWVTp8+fdVbMADhQBTQ6Z07d05btmzRuHHjIj2KY+np6ZEeAV0UUUCnV1JSomPHjqmurk5jx47Vm2++qebmZj322GP6zne+o7KyMv3lL39Ra2ur4uPjVVxcfNW/X716td59910FAgENGjRIhYWFqq2t1cqVK+V2u5WQkKDnnntO586d04IFC+R2uxUdHa1nn31W/fr10+rVq3XgwAHZtq0ZM2bo3nvvVU5Ojr7yla/ovffeU48ePTR69Gjt3btXFy9e1G9/+1tVVlaaM5XrbR8IFaKATm/27Nk6evSoxo0bp8bGRi1fvlw1NTXasGGDxo8fr+bmZm3atElRUVGaOXOm3nnnHfNv/X6/EhIStHHjRrW3t+v73/++zpw5o507d2rSpEmaOXOmdu3apYsXL6q6ulp333238vPzdfDgQf373//WkSNH1NDQoPLyclmWpczMTI0ZM0bSx2+psGjRIs2cOVN33HGHNm7cqLy8PB04cOCG2+/Xr1/Yv4/oGogCupS7775bktS7d2999NFHioqKUrdu3fT444+rR48eamxsVGtrq3n8J29298nyS5cuKRgMavbs2SopKdH06dPVr18/DR8+XFOmTNH69es1a9YsxcfHa/78+Tp69Kjq6+uVk5MjSWptbdWpU6eumiUhIUGDBw82X1uWdcPtA6FCFNDpRUVFqb29XZLkcrmuWnbkyBHt3LlTW7Zs0eXLlzV58mT99zu/fPIH3zVr1ujChQvasWOHbNvW66+/rvvuu095eXlat26dKioqlJSUpFGjRumRRx7RG2+8oQ0bNmjixIlKTU3VsmXL1N7errVr16p///6OZ/+s7QOhQhTQ6X3pS19SMBjURx99dM2ygQMHqnv37po8ebJiYmLUp08fnT171iwfPny41q5dq8zMTMXExGjAgAE6e/asvv71rys/P189evRQt27d9LOf/Uy2bevJJ59UcXGxoqKitGDBAg0bNkxvv/22srOzdenSJU2cOFFxcXGOZ/+s7Q8YMOCmfG+AT+MN8QAABi9eAwAYRAEAYBAFAIBBFAAABlEAABhEAQBgEAUAgEEUAADG/wOkqepzOXOjjQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0    152\n",
      "7.0    104\n",
      "6.0     14\n",
      "Name: thalassemia, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# There are 3 types of thalassemia - 3: normal; 6: fixed defect; 7: reversable defect\n",
    "sns.countplot(data.thalassemia) ## Plotting using a histogram\n",
    "plt.show()\n",
    "print(data.thalassemia.value_counts()) ## Printing the actual count for each type of Thalassemia"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Observations...\n",
    "- Looking at the correlation table that we have generated earlier on, thalassemia was the greatest predictor of heart disease.\n",
    "- Remember that there were 150 patients that DID NOT HAVE HEART DISEASE in our dataset. Compare that with the 152 patients whose thalassemia is Normal.\n",
    "- The question that we have is if there is a meaningful overlap in these two numbers.\n",
    "- We can answer this question by finding out the number of people who do not have heart disease and have a normal thalessemia (ie. thalessemia value=3). It turns out: 119 out of 152 people with normal thalessemia DO NOT HAVE heart disease, supporting the high correlation in our correlation matrix. However, due to the small sample size that we have, we understand that this is not indicative of the real population. \n",
    "\n",
    "<i><u>Definition Taken from MedlinePlus, a Medical Encyclopedia:</u></i> \n",
    "- Thalassemia is a blood disorder passed down through families (inherited) in which the body makes an abnormal form or inadequate amount of hemoglobin. \n",
    "- Hemoglobin is the protein in red blood cells that carries oxygen. The disorder results in large numbers of red blood cells being destroyed, which leads to anemia."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3 - Data Preparation <a id='S3'></a></br><a href='#C'><font size=2><i>(Back to Contents) â†‘</i></font></a>\n",
    "### <u>Feature Selection</u><a id='FS'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining X and y variables for feature selection\n",
    "X = data.drop([\"target\"], axis=1)\n",
    "y = data[\"target\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature Selection Method 1: Univariate Selection\n",
    "- To select those features that have the strongest relationship with our target variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      Specs       Score\n",
      "7            max_heart_rate  168.929831\n",
      "11        num_major_vessels   74.122652\n",
      "12              thalassemia   59.463091\n",
      "9             st_depression   58.697286\n",
      "4                      chol   40.093093\n",
      "8   exercise_induced_angina   31.822472\n",
      "0                       age   18.485273\n",
      "3            blood_pressure   15.775632\n",
      "2           chest_pain_type   13.330455\n",
      "6                  rest_ecg    8.688587\n"
     ]
    }
   ],
   "source": [
    "#apply SelectKBest class to extract top 10 best features\n",
    "bestfeatures = SelectKBest(score_func=chi2, k=10)\n",
    "fit = bestfeatures.fit(X,y)\n",
    "dfscores = pd.DataFrame(fit.scores_)\n",
    "dfcolumns = pd.DataFrame(X.columns)\n",
    "#concat two dataframes for better visualization \n",
    "featureScores = pd.concat([dfcolumns,dfscores],axis=1)\n",
    "featureScores.columns = ['Specs','Score']  #naming the dataframe columns\n",
    "print(featureScores.nlargest(10,'Score'))  #print 10 best features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Top 4 features at a glance...\n",
    "<img src=\"http://charlestay.com/animation1.gif\" width=\"50%\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature Selection Method 2: Feature Importance\n",
    "- Gives a score for each feature, ,ie. higher score has more importance or relevance to output.\n",
    "- Feature importance is an inbuilt class that comes with Tree Based Classifiers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.07060451 0.04566587 0.10004963 0.06679752 0.06694051 0.01921091\n",
      " 0.0367057  0.08525691 0.07433716 0.08223694 0.05664205 0.1211162\n",
      " 0.1744361 ]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Feature importance using ExtraTreesClassifier where n_estimators, ie. number of trees, =100\n",
    "model = ExtraTreesClassifier(n_estimators=100)\n",
    "model.fit(X,y)\n",
    "print(model.feature_importances_)  #use inbuilt class feature_importances of tree based classifiers\n",
    "#plot graph of feature importances for better visualization\n",
    "feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n",
    "feat_importances.nlargest(10).plot(kind='barh')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Univariate Selection, Feature Importance, as well as the Correlation Matrix (with Heatmap) that we have generated earlier on are three popular Feature Selection Techniques. All three techniques depicted at least 4 similar features, out of the top 5 features in each technique. \n",
    "\n",
    "We will explore Feature Selection in greater depth as we try to improve the results of our weakest model (ie. Support Vector Machine); and it proved to be a major success as you will see later on!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <u>Feature Engineering</u><a id='FE'></a>\n",
    "#### Converting Categorical Data Type to Objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Converting selected data types into 'object' for one hot encoding - selected data are categorical data types that are polynomial in nature\n",
    "data['sex'] = data['sex'].astype('object')\n",
    "data['chest_pain_type'] = data['chest_pain_type'].astype('object')\n",
    "data['blood_sugar'] = data['blood_sugar'].astype('object')\n",
    "data['rest_ecg'] = data['rest_ecg'].astype('object')\n",
    "data['exercise_induced_angina'] = data['exercise_induced_angina'].astype('object')\n",
    "data['st_slope'] = data['st_slope'].astype('object')\n",
    "data['num_major_vessels'] = data['num_major_vessels'].astype('object')\n",
    "data['thalassemia'] = data['thalassemia'].astype('object')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Generating Dummy Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>blood_pressure</th>\n",
       "      <th>chol</th>\n",
       "      <th>max_heart_rate</th>\n",
       "      <th>st_depression</th>\n",
       "      <th>target</th>\n",
       "      <th>sex_0.0</th>\n",
       "      <th>sex_1.0</th>\n",
       "      <th>chest_pain_type_1.0</th>\n",
       "      <th>chest_pain_type_2.0</th>\n",
       "      <th>...</th>\n",
       "      <th>st_slope_1.0</th>\n",
       "      <th>st_slope_2.0</th>\n",
       "      <th>st_slope_3.0</th>\n",
       "      <th>num_major_vessels_0.0</th>\n",
       "      <th>num_major_vessels_1.0</th>\n",
       "      <th>num_major_vessels_2.0</th>\n",
       "      <th>num_major_vessels_3.0</th>\n",
       "      <th>thalassemia_3.0</th>\n",
       "      <th>thalassemia_6.0</th>\n",
       "      <th>thalassemia_7.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>70.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>322.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>564.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    age  blood_pressure   chol  max_heart_rate  st_depression  target  \\\n",
       "0  70.0           130.0  322.0           109.0            2.4       2   \n",
       "1  67.0           115.0  564.0           160.0            1.6       1   \n",
       "\n",
       "   sex_0.0  sex_1.0  chest_pain_type_1.0  chest_pain_type_2.0  \\\n",
       "0        0        1                    0                    0   \n",
       "1        1        0                    0                    0   \n",
       "\n",
       "        ...         st_slope_1.0  st_slope_2.0  st_slope_3.0  \\\n",
       "0       ...                    0             1             0   \n",
       "1       ...                    0             1             0   \n",
       "\n",
       "   num_major_vessels_0.0  num_major_vessels_1.0  num_major_vessels_2.0  \\\n",
       "0                      0                      0                      0   \n",
       "1                      1                      0                      0   \n",
       "\n",
       "   num_major_vessels_3.0  thalassemia_3.0  thalassemia_6.0  thalassemia_7.0  \n",
       "0                      1                1                0                0  \n",
       "1                      0                0                0                1  \n",
       "\n",
       "[2 rows x 29 columns]"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Applying one-hot encode categorical features\n",
    "data = pd.get_dummies(data)\n",
    "data.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "270 x 29\n"
     ]
    }
   ],
   "source": [
    "## Printing the shape of our data\n",
    "print(data.shape[0], \"x\", data.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining X and y variables for ML Algorithm (now that we have generated the dummy variables)\n",
    "X = data.drop([\"target\"], axis=1)\n",
    "y = data[\"target\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### <b>***Observation:</b> Performance for all 7 classification models that we have <u><font color=\"orange\">improved</font></u> by 1-5% WITH <u>FEATURE ENGINEERING!</u>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4 - Classification Models / Machine Learning Algorithms <a id='S4'></a></br><a href='#C'><font size=2><i>(Back to Contents) â†‘</i></font></a>\n",
    "\n",
    "Since the problem of predicting heart disease is a classification problem, we ran our dataset across the most popular classification algorithms. Here is a list, feel free to click on the links to navigate to desired sections.\n",
    "\n",
    "[K-Nearest Neigbors (KNN)](#KNN)</br>\n",
    "[Logistic Regression](#LR)</br>\n",
    "[Gradient Boosting](#GB)</br>\n",
    "[Support Vector Machine (SVM)](#SVM)</br>\n",
    "[Decision Tree](#DT)</br>\n",
    "[Random Forest](#RF)</br>\n",
    "[Naive Bayes](#NB)\n",
    "\n",
    "Before we dive in, we would like to explain the two most commonly-used functions in this section:\n",
    "- \"scoring=\" : scoring method of our model (possible values include: accuracy, precision, recall, f1 score)\n",
    "- \"cv=\" : number of folds in cross validation technique\n",
    "\n",
    "### <u>K-Nearest Neighbors (KNN)</u><a id='KNN'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6666666666666667\n"
     ]
    }
   ],
   "source": [
    "# We used an industry practice of a 10-fold cross-validation with k=10 (the n_neighbors hyperparameter)\n",
    "knn = KNeighborsClassifier(n_neighbors=10)\n",
    "scores = cross_val_score(knn, X, y, cv=10, scoring='accuracy') #cv is the cross-validation parameter\n",
    "print(scores.mean()) # average accuracy used for an estimate of out-of-sample accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Accuracy Score')"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now, let's iterate through potential values of K to find an optimal value for our KNN model and to confirm if k=10 was a good value\n",
    "k_range = range(1,101)\n",
    "models = []\n",
    "for k in k_range: \n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    k_scores = cross_val_score(knn, X, y, cv=10, scoring='accuracy')\n",
    "    models.append(k_scores.mean())\n",
    "    \n",
    "# Let's plot the k values to see more quickly what k value generates the highest accuracy score\n",
    "plt.plot(k_range, models)\n",
    "plt.xlabel('K Value')\n",
    "plt.ylabel('Accuracy Score')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.6888888888888889\n"
     ]
    }
   ],
   "source": [
    "# From our work above (identifying the peak) we know the best value to be 22, plugging that in, we get an accuracy of 0.689 \n",
    "knn = KNeighborsClassifier(n_neighbors=22)\n",
    "knn_scores_accuracy = (cross_val_score(knn, X, y, cv=10, scoring='accuracy').mean())\n",
    "print(\"accuracy:\", knn_scores_accuracy.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "True enough, k = 22 produced the highest accuracy score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[122  28]\n",
      " [ 56  64]]\n",
      "precision: 0.6843567251461988\n",
      "recall: 0.8133333333333332\n",
      "f1 score: 0.7427577482605946\n"
     ]
    }
   ],
   "source": [
    "# With k=22, let's take a look at the precision, recall, and f1 performances.\n",
    "knn_predictions = cross_val_predict(knn, X, y, cv=10)\n",
    "print(confusion_matrix(y, knn_predictions))\n",
    "knn_scores_precision = (cross_val_score(knn, X, y, cv=10, scoring='precision').mean())\n",
    "knn_scores_recall = (cross_val_score(knn, X, y, cv=10, scoring='recall').mean())\n",
    "knn_scores_f1 = (cross_val_score(knn, X, y, cv=10, scoring='f1').mean())\n",
    "print(\"precision:\", knn_scores_precision.mean())\n",
    "print(\"recall:\", knn_scores_recall.mean())\n",
    "print(\"f1 score:\", knn_scores_f1.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <u>Logistic Regression</u><a id='LR'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[136  14]\n",
      " [ 23  97]]\n",
      "accuracy: 0.8629629629629629\n",
      "precision: 0.8635236989532654\n",
      "recall: 0.9066666666666666\n",
      "f1 score: 0.8803428500252586\n"
     ]
    }
   ],
   "source": [
    "# Logistic Regression with a 10-fold cross validation\n",
    "## We tried other cv values which generated similar results but cv=10 produced a higher precision\n",
    "lr_model = LogisticRegression(solver=\"liblinear\")\n",
    "lr_predictions = cross_val_predict(lr_model, X, y, cv=10)\n",
    "print(confusion_matrix(y, lr_predictions))\n",
    "lr_scores_recall = cross_val_score(lr_model, X, y, scoring=\"recall\", cv=10)\n",
    "lr_scores_accuracy = cross_val_score(lr_model, X, y, scoring=\"accuracy\", cv=10)\n",
    "lr_scores_f1 = (cross_val_score(lr_model, X, y, scoring='f1', cv=10).mean())\n",
    "lr_scores_precision = (cross_val_score(lr_model, X, y, scoring='precision', cv=10).mean())\n",
    "print(\"accuracy:\", lr_scores_accuracy.mean())\n",
    "print(\"precision:\", lr_scores_precision.mean())\n",
    "print(\"recall:\", lr_scores_recall.mean())\n",
    "print(\"f1 score:\", lr_scores_f1.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <u>Gradient Boosting</u><a id='GB'></a>\n",
    "Gradient Boosting (and variations of it such as eXtreme Gradient Boosting, XGBoost) is widely used by Data Scientists and in Kaggle competitions, with some sources stating that it is the <a href=\"https://www.kdnuggets.com/2017/10/xgboost-top-machine-learning-method-kaggle-explained.html\">top machine learning algorithm on Kaggle\" (Reinstein 2017)</a>.\n",
    "\n",
    "Gradient Boosting (GB) resembles Random Forest (RF), one key difference is that GB uses regression tree while RF uses decision tree."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[128  22]\n",
      " [ 39  81]]\n",
      "accuracy: 0.7555555555555555\n",
      "precision: 0.7831184201075843\n",
      "recall: 0.7933333333333333\n",
      "f1 score: 0.7786260635758444\n"
     ]
    }
   ],
   "source": [
    "# Gradient Boosting Classifier\n",
    "## exponential loss, learning rate of 0.03 (ie. this shrinks the contribution of each tree by 0.03)\n",
    "## 75 (number of) boosting stages to perform (GB is fairly robust to over-fitting; a large number usually results in better performance)\n",
    "## Maximum depth of 6 (the maximum depth limits the number of nodes in the tree)\n",
    "\n",
    "gb_model = GradientBoostingClassifier(loss='exponential', learning_rate=0.03, n_estimators=75 , max_depth=6)\n",
    "gb_predictions = cross_val_predict(gb_model, X, y, cv=5)\n",
    "print(confusion_matrix(y, gb_predictions))\n",
    "gb_scores_accuracy = cross_val_score(gb_model, X, y, scoring=\"accuracy\", cv=10)\n",
    "gb_scores_precision = cross_val_score(gb_model, X, y, scoring=\"precision\", cv=10)\n",
    "gb_scores_recall = cross_val_score(gb_model, X, y, scoring=\"recall\", cv=10)\n",
    "gb_scores_f1 = cross_val_score(gb_model, X, y, scoring=\"f1\", cv=10)\n",
    "print(\"accuracy:\", gb_scores_accuracy.mean())\n",
    "print(\"precision:\", gb_scores_precision.mean())\n",
    "print(\"recall:\", gb_scores_recall.mean())\n",
    "print(\"f1 score:\", gb_scores_f1.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <u>Support Vector Machine (SVM)</u><a id='SVM'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[147   3]\n",
      " [112   8]]\n",
      "accuracy: 0.5740740740740741\n",
      "precision: 0.5678632478632478\n",
      "recall: 0.9800000000000001\n",
      "f1 score: 0.7189895470383274\n"
     ]
    }
   ],
   "source": [
    "## Support Vector Machine - SVM seems to provide the best recall result but relatively low accuracy (compared to our other models)\n",
    "svc_model = SVC(gamma=\"auto\")\n",
    "svc_predictions = cross_val_predict(svc_model, X, y, cv=5)\n",
    "print(confusion_matrix(y, svc_predictions))\n",
    "svc_scores_recall = cross_val_score(svc_model, X, y, scoring=\"recall\", cv=10)\n",
    "svc_scores_accuracy = cross_val_score(svc_model, X, y, scoring=\"accuracy\", cv=10)\n",
    "svc_scores_f1 = (cross_val_score(svc_model, X, y, scoring='f1', cv=10).mean())\n",
    "svc_scores_precision = (cross_val_score(svc_model, X, y, scoring='precision', cv=10).mean())\n",
    "print(\"accuracy:\", svc_scores_accuracy.mean())\n",
    "print(\"precision:\", svc_scores_precision.mean())\n",
    "print(\"recall:\", svc_scores_recall.mean())\n",
    "print(\"f1 score:\", svc_scores_f1.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to improve accuracy, we feature engineered our SVM by applying featuring scaling on age, blood pressure, cholesterol, maximum heart rate and st depression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature Scaling on SVM\n",
    "## Applying MinMaxScaler in sklearn.\n",
    "X[\"age\"] = X[\"age\"].map(lambda x: (x - X[\"age\"].min()) / (X[\"age\"].max() - X[\"age\"].min()))\n",
    "X[\"blood_pressure\"] = X[\"blood_pressure\"].map(lambda x: (x - X[\"blood_pressure\"].min()) / (X[\"blood_pressure\"].max() - X[\"blood_pressure\"].min()))\n",
    "X[\"chol\"] = X[\"chol\"].map(lambda x: (x - X[\"chol\"].min()) / (X[\"chol\"].max() - X[\"chol\"].min()))\n",
    "X[\"max_heart_rate\"] = X[\"max_heart_rate\"].map(lambda x: (x - X[\"max_heart_rate\"].min()) / (X[\"max_heart_rate\"].max() - X[\"max_heart_rate\"].min()))\n",
    "X[\"st_depression\"] = X[\"st_depression\"].map(lambda x: (x - X[\"st_depression\"].min()) / (X[\"st_depression\"].max() - X[\"st_depression\"].min()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[135  15]\n",
      " [ 27  93]]\n",
      "accuracy: 0.8444444444444444\n",
      "precision: 0.8343550543384509\n",
      "recall 0.9\n",
      "f1 score 0.8657206126765884\n"
     ]
    }
   ],
   "source": [
    "# Cross Validation of 5-folds (produced better results than 10-folds)\n",
    "svc_model = SVC(gamma=\"auto\")\n",
    "svc_predictions = cross_val_predict(svc_model, X, y, cv=5)\n",
    "print(confusion_matrix(y, svc_predictions))\n",
    "svc_scores_recall = cross_val_score(svc_model, X, y, scoring=\"recall\", cv=5)\n",
    "svc_scores_accuracy = cross_val_score(svc_model, X, y, scoring=\"accuracy\", cv=5)\n",
    "svc_scores_f1 = cross_val_score(svc_model, X, y, scoring=\"f1\", cv=5)\n",
    "svc_scores_precision = cross_val_score(svc_model, X, y, scoring=\"precision\", cv=5)\n",
    "print(\"accuracy:\", svc_scores_accuracy.mean())\n",
    "print(\"precision:\", svc_scores_precision.mean())\n",
    "print(\"recall\", svc_scores_recall.mean())\n",
    "print(\"f1 score\", svc_scores_f1.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>With feature scaling, we managed to improve accuracy of our SVM model from 57.4% to 84.4%!</b></br>\n",
    "This motivated us to try other methods of data manipulation (ie. feature selection):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[125  25]\n",
      " [ 41  79]]\n",
      "the best percentage so far: 1\n",
      "the best recall so far 0.8333333333333333 \n",
      "\n",
      "[[125  25]\n",
      " [ 41  79]]\n",
      "the best percentage so far: 1\n",
      "the best accuracy so far 0.7555555555555555 \n",
      "\n",
      "[[131  19]\n",
      " [ 53  67]]\n",
      "the best percentage so far: 4\n",
      "the best recall so far 0.8733333333333334 \n",
      "\n",
      "[[125  25]\n",
      " [ 37  83]]\n",
      "the best percentage so far: 8\n",
      "the best accuracy so far 0.7703703703703704 \n",
      "\n",
      "[[134  16]\n",
      " [ 26  94]]\n",
      "the best percentage so far: 15\n",
      "the best recall so far 0.8933333333333333 \n",
      "\n",
      "[[134  16]\n",
      " [ 26  94]]\n",
      "the best percentage so far: 15\n",
      "the best accuracy so far 0.8444444444444444 \n",
      "\n",
      "[[134  16]\n",
      " [ 25  95]]\n",
      "the best percentage so far: 19\n",
      "the best accuracy so far 0.8481481481481481 \n",
      "\n",
      "[[135  15]\n",
      " [ 22  98]]\n",
      "the best percentage so far: 23\n",
      "the best recall so far 0.9 \n",
      "\n",
      "[[135  15]\n",
      " [ 22  98]]\n",
      "the best percentage so far: 23\n",
      "the best accuracy so far 0.8629629629629628 \n",
      "\n",
      "[[136  14]\n",
      " [ 26  94]]\n",
      "the best percentage so far: 30\n",
      "the best recall so far 0.9066666666666668 \n",
      "\n",
      "[[137  13]\n",
      " [ 23  97]]\n",
      "the best percentage so far: 63\n",
      "the best recall so far 0.9133333333333334 \n",
      "\n",
      "[[137  13]\n",
      " [ 23  97]]\n",
      "the best percentage so far: 63\n",
      "the best accuracy so far 0.8666666666666666 \n",
      "\n",
      "[[138  12]\n",
      " [ 26  94]]\n",
      "the best percentage so far: 67\n",
      "the best recall so far 0.9200000000000002 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Feature Selection on SVM using sklearn.feature_selection.SelectPercentile and applying chi2 (Chi-squared stats)\n",
    "best_recall = 0\n",
    "best_accuracy = 0\n",
    "for n in range(1, 101): ## range 1-100th percentile for chi-square\n",
    "    X_new = SelectPercentile(chi2, percentile=n).fit_transform(X, y)\n",
    "\n",
    "    svc_model = SVC(gamma=\"auto\")\n",
    "    svc_predictions = cross_val_predict(svc_model, X_new, y, cv=10) ## CV of 10\n",
    "    svc_scores_recall = cross_val_score(svc_model, X_new, y, scoring=\"recall\", cv=10)\n",
    "    svc_scores_accuracy = cross_val_score(svc_model, X_new, y, scoring=\"accuracy\", cv=10)\n",
    "    \n",
    "    if svc_scores_recall.mean() > best_recall: ## runs through all recalls greater than the mean\n",
    "        best_recall = svc_scores_recall.mean()\n",
    "        print(confusion_matrix(y, svc_predictions))\n",
    "        print(\"the best percentage so far:\", n)\n",
    "        print(\"the best recall so far\", svc_scores_recall.mean(), \"\\n\")\n",
    "        \n",
    "    if svc_scores_accuracy.mean() > best_accuracy: ## runs through all accuracies greater than the mean\n",
    "        best_accuracy = svc_scores_accuracy.mean()\n",
    "        print(confusion_matrix(y, svc_predictions))\n",
    "        print(\"the best percentage so far:\", n)\n",
    "        print(\"the best accuracy so far\", svc_scores_accuracy.mean(), \"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Accuracy is highest at the 63rd Percentile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[137  13]\n",
      " [ 23  97]]\n",
      "Highest accuracy score:  0.8666666666666666 \n",
      "\n",
      "Corresponding precision:  0.8629147245942912 \n",
      "\n",
      "Corresponding recall:  0.9133333333333334 \n",
      "\n",
      "Corresponding f1 score:  0.8836502392948281 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "X_new = SelectPercentile(chi2, percentile=63).fit_transform(X, y)        \n",
    "svc_model = SVC(gamma=\"auto\")\n",
    "svc_predictions = cross_val_predict(svc_model, X_new, y, cv=10)\n",
    "print(confusion_matrix(y, svc_predictions))\n",
    "svc_scores_recall = cross_val_score(svc_model, X_new, y, scoring=\"recall\", cv=10)\n",
    "svc_scores_accuracy = cross_val_score(svc_model, X_new, y, scoring=\"accuracy\", cv=10)\n",
    "svc_scores_precision = cross_val_score(svc_model, X_new, y, scoring=\"precision\", cv=10)\n",
    "svc_scores_f1 = cross_val_score(svc_model, X_new, y, scoring=\"f1\", cv=10)\n",
    "print(\"Highest accuracy score: \", svc_scores_accuracy.mean(), \"\\n\")\n",
    "print(\"Corresponding precision: \", svc_scores_precision.mean(), \"\\n\")\n",
    "print(\"Corresponding recall: \", svc_scores_recall.mean(), \"\\n\")\n",
    "print(\"Corresponding f1 score: \", svc_scores_f1.mean(), \"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Old number of features used: 28\n",
      "New number of features used: 18\n"
     ]
    }
   ],
   "source": [
    "## Print number of old features used\n",
    "print(\"Old number of features used:\",X.shape[1])\n",
    "## Print number of new features used\n",
    "print(\"New number of features used:\",X_new.shape[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using feature selection, we reduced the number of (irrelevant) features and now use only 18 of the original 28 features. These are the 18 features with the highest correlation. This greatly improved the accuracy score of our Support Vector Machine Model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "V9YYv2avFji4"
   },
   "source": [
    "### <u>Decision Tree</u><a id='DT'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "vWsWqMzSFji7"
   },
   "outputs": [],
   "source": [
    "# test_size=0.3 splits our data into a 70/30 split which means that we are going to train our data with 70% of the data \n",
    "# and then we are going to see how well we can predict our classification models off of 30% of the remaining data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "EhlAr3aPFjjC",
    "outputId": "0084cbc1-8093-465b-c549-3d7f5ea168e1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "            max_features=None, max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n",
       "            splitter='best')"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decision Tree Classifier/Algorithm\n",
    "DT = DecisionTreeClassifier()\n",
    "DT.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "eW79CVBqFjjI",
    "outputId": "2e148d25-105e-4618-8968-cc34fdeed2f0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy:  0.7530864197530864\n"
     ]
    }
   ],
   "source": [
    "y_pred = DT.predict(X_test)\n",
    "print(\"accuracy: \", DT.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.72      0.76      0.74        38\n",
      "           2       0.78      0.74      0.76        43\n",
      "\n",
      "   micro avg       0.75      0.75      0.75        81\n",
      "   macro avg       0.75      0.75      0.75        81\n",
      "weighted avg       0.75      0.75      0.75        81\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Printing other evaluation metrics, such as precision, recall, f1-score\n",
    "## Reference - Target 1: Heart Disease Absent; Target 2: Heart Disease Present\n",
    "report = classification_report(y_test,y_pred)\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6-IGnu0NFjjY"
   },
   "outputs": [],
   "source": [
    "# We were interested in seeing how changing our train-test split ratio to 80-20 affects accuracy (ie. feeding more data to our training set)\n",
    "X=data.drop('target',axis=1)\n",
    "Y=data['target']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6fsbm2l4Fjjb",
    "outputId": "5860fe8c-e9dd-469b-d2e1-aec345f29fd7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "            max_features=None, max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n",
       "            splitter='best')"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "DT.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Oa6cBV2LFjje",
    "outputId": "5654895e-9518-41a7-ee57-ab92851f544d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy  0.8148148148148148\n"
     ]
    }
   ],
   "source": [
    "y_pred = DT.predict(X_test)\n",
    "print(\"accuracy \", DT.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.90      0.69      0.78        26\n",
      "           2       0.76      0.93      0.84        28\n",
      "\n",
      "   micro avg       0.81      0.81      0.81        54\n",
      "   macro avg       0.83      0.81      0.81        54\n",
      "weighted avg       0.83      0.81      0.81        54\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Printing other evaluation metrics, such as precision, recall, f1-score\n",
    "## Reference - Target 1: Heart Disease Absent; Target 2: Heart Disease Present\n",
    "report = classification_report(y_test,y_pred)\n",
    "print(report)\n",
    "\n",
    "# Definining dtcm = decision tree confusion matrix (to be used in Section 5)\n",
    "dtcm = confusion_matrix(y_pred, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Observation: A 80-20 split generated an overall better performance than 70-30 for our Decision Tree."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "lNbm2LdJFjjn"
   },
   "source": [
    "### <u>Random Forest</u><a id='RF'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ZW4SVdJpFjjq"
   },
   "outputs": [],
   "source": [
    "# Random Forest Model (100 trees)\n",
    "RF = RandomForestClassifier(n_estimators=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "smVtENgTFjju",
    "outputId": "a72a3008-5fcd-4cf6-8f6e-0469d142335d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False)"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using previously-defined 80-20 split\n",
    "RF.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "SiskWZMtFjj1",
    "outputId": "a1891d95-8562-428e-9222-3bcfb82c7a1d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy:  0.8888888888888888\n"
     ]
    }
   ],
   "source": [
    "y_pred = RF.predict(X_test)\n",
    "print(\"accuracy: \", RF.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.88      0.88      0.88        26\n",
      "           2       0.89      0.89      0.89        28\n",
      "\n",
      "   micro avg       0.89      0.89      0.89        54\n",
      "   macro avg       0.89      0.89      0.89        54\n",
      "weighted avg       0.89      0.89      0.89        54\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Printing other evaluation metrics, such as precision, recall, f1-score\n",
    "## Reference - Target 1: Heart Disease Absent; Target 2: Heart Disease Present\n",
    "report = classification_report(y_test,y_pred)\n",
    "print(report)\n",
    "# Definining rfcm = random forest confusion matrix (to be used in Section 5)\n",
    "rfcm = confusion_matrix(y_pred, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[133  17]\n",
      " [ 27  93]]\n",
      "accuracy: 0.8296296296296296\n",
      "precision: 0.8393101343101345\n",
      "recall: 0.8800000000000001\n",
      "f1 score: 0.8507727922800224\n"
     ]
    }
   ],
   "source": [
    "## Random Forest with Cross Validation instead of 70-30 train-test split\n",
    "rf_model = RandomForestClassifier(n_estimators=100)\n",
    "rf_predictions = cross_val_predict(rf_model, X, y, cv=10)\n",
    "print(confusion_matrix(y, rf_predictions))\n",
    "rf_scores_recall = cross_val_score(rf_model, X, y, scoring=\"recall\", cv=10)\n",
    "rf_scores_accuracy = cross_val_score(rf_model, X, y, scoring=\"accuracy\", cv=10)\n",
    "rf_scores_precision = cross_val_score(rf_model, X, y, scoring=\"precision\", cv=10)\n",
    "rf_scores_f1 = cross_val_score(rf_model, X, y, scoring=\"f1\", cv=10)\n",
    "print(\"accuracy:\", rf_scores_accuracy.mean())\n",
    "print(\"precision:\", rf_scores_precision.mean())\n",
    "print(\"recall:\", rf_scores_recall.mean())\n",
    "print(\"f1 score:\", rf_scores_f1.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Observation: Random Forest with Cross Validation of 10 folds yield a higher accuracy than a 80-20 split.</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <u>Naive Bayes</u><a id='NB'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "iXLwPEfzsvUW"
   },
   "outputs": [],
   "source": [
    "# Performing Naive Bayes\n",
    "nb_model = GaussianNB()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Naive Bayes with 70-30 train-test split.\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "L9rAnv9asvUX"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GaussianNB(priors=None, var_smoothing=1e-09)"
      ]
     },
     "execution_count": 260,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fitting training data set into classifier\n",
    "nb_model.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qlgBa-oesvUa"
   },
   "outputs": [],
   "source": [
    "# Predicting the model\n",
    "y_pred = nb_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Q93ilQYYsvUd"
   },
   "outputs": [],
   "source": [
    "# Creating confusion matrix\n",
    "bayes_cm = confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "UlK94UPQsvUh",
    "outputId": "a5a9f757-400f-45d1-9282-be2aa04e19da"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[35  3]\n",
      " [ 9 34]]\n",
      "accuracy:  0.8518518518518519\n",
      "precision:  0.7954545454545454\n",
      "recall:  0.9210526315789473\n",
      "f1_score:  0.8536585365853658\n"
     ]
    }
   ],
   "source": [
    "# Compare and test different score methods for Naive Bayes 70-30 Split\n",
    "nb_split_precision = metrics.precision_score(y_test,y_pred)\n",
    "nb_split_recall = metrics.recall_score(y_test,y_pred)\n",
    "nb_split_accuracy = metrics.accuracy_score(y_test, y_pred)\n",
    "nb_split_f1_score = metrics.f1_score(y_test,y_pred)\n",
    "nb_split_cm = confusion_matrix(y_test, y_pred)\n",
    "print(nb_split_cm)\n",
    "print(\"accuracy: \", nb_split_accuracy)\n",
    "print(\"precision: \", nb_split_precision)\n",
    "print(\"recall: \", nb_split_recall)\n",
    "print(\"f1_score: \", nb_split_f1_score)      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Instead of a 70-30 split, we wanted to investigate the effect of an 80-20 split \n",
    "X1_train, X1_test, y1_train, y1_test = train_test_split(X, y, test_size=0.20, random_state=10)\n",
    "nb_model1 = GaussianNB()\n",
    "nb_model1.fit(X1_train, y1_train)\n",
    "y1_pred = nb_model.predict(X1_test)\n",
    "bayes_cm1 = confusion_matrix(y1_test,y1_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[24  2]\n",
      " [ 4 24]]\n",
      "accuracy:  0.8888888888888888\n",
      "precision:  0.8571428571428571\n",
      "recall:  0.9230769230769231\n",
      "f1_score:  0.888888888888889\n"
     ]
    }
   ],
   "source": [
    "# Compare and test different score methods for Naive Bayes 80-20 Split\n",
    "nb_split_precision = metrics.precision_score(y1_test,y1_pred)\n",
    "nb_split_recall = metrics.recall_score(y1_test,y1_pred)\n",
    "nb_split_accuracy = metrics.accuracy_score(y1_test, y1_pred)\n",
    "nb_split_f1_score = metrics.f1_score(y1_test,y1_pred)\n",
    "nb_split_cm = confusion_matrix(y1_test, y1_pred)\n",
    "print(nb_split_cm)\n",
    "print(\"accuracy: \", nb_split_accuracy)\n",
    "print(\"precision: \", nb_split_precision)\n",
    "print(\"recall: \", nb_split_recall)\n",
    "print(\"f1_score: \", nb_split_f1_score)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[127  23]\n",
      " [ 26  94]]\n",
      "accuracy:  0.8185185185185185\n",
      "precision:  0.8431922188578534\n",
      "recall:  0.8466666666666667\n",
      "f1 score:  0.8393511441229494\n"
     ]
    }
   ],
   "source": [
    "## Naive Bayes with Cross Validation of 10-folds\n",
    "nbcv_model = GaussianNB()\n",
    "nbcv_predictions = cross_val_predict(nbcv_model, X, y, cv=10)\n",
    "print(confusion_matrix(y, nbcv_predictions))\n",
    "nbcv_scores_accuracy = cross_val_score(nb_model, X, y, scoring=\"accuracy\", cv=10)\n",
    "nbcv_scores_precision = cross_val_score(nb_model, X, y, scoring=\"precision\", cv=10)\n",
    "nbcv_scores_recall = cross_val_score(nb_model, X, y, scoring=\"recall\", cv=10)\n",
    "nbcv_scores_f1 = cross_val_score(nb_model, X, y, scoring=\"f1\", cv=10)\n",
    "print(\"accuracy: \", nbcv_scores_accuracy.mean())\n",
    "print(\"precision: \", nbcv_scores_precision.mean())\n",
    "print(\"recall: \", nbcv_scores_recall.mean())\n",
    "print(\"f1 score: \", nbcv_scores_f1.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>It seems like Naive Bayes with an 80-20 train-test split produced the best accuracy score compared to 70-30 split and cross validation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5 - Evaluation <a id='S5'></a></br><a href='#C'><font size=2><i>(Back to Contents) â†‘</i></font></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <u>Accuracy, Precision, Recall, F1 Score at A Glance</u>\n",
    "We created a dashboard (using Tableau) with the performance scores from our best models.</br>\n",
    "- It seems like Naiive Bayes with an 80-20 split is our leading contender in Accuracy (88.9%), Recall (92.3%) and F1 Score (88.9%).\n",
    "- Logistic Regression with a 5-fold cross validation performs best in terms of Precision (86.4%)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"http://charlestay.com/7ModelsDB.jpg\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <u>Confusion Matrices</u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 7 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generating Confusion Matrices of the 6 Models that we have\n",
    "## Defining the different confusion matrices (some have been defined earlier on and thus missing in this list)\n",
    "lrcm = confusion_matrix(y, lr_predictions)\n",
    "svmcm = confusion_matrix(y, svc_predictions)\n",
    "nbcm = confusion_matrix(y1_test, y1_pred)\n",
    "knncm = confusion_matrix(y, knn_predictions)\n",
    "gbcm = confusion_matrix(y, gb_predictions)\n",
    "## Defining size of visualization\n",
    "plt.figure(figsize=(20,10))\n",
    "## Plotting with 2 rows and 4 columns, the last value refers to the order it appears in.\n",
    "plt.subplot(2,4,1)\n",
    "plt.title(\"Logistic Regression\")\n",
    "sns.heatmap(lrcm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False,annot_kws={\"size\": 20}) ## annot_kws defines the font size of values.\n",
    "plt.subplot(2,4,2)\n",
    "plt.title(\"Support Vector Machine\")\n",
    "sns.heatmap(svmcm,annot=True,cmap=\"Greys\",fmt=\"d\",cbar=False,annot_kws={\"size\": 20})\n",
    "plt.subplot(2,4,3)\n",
    "plt.title(\"Naive Bayes\")\n",
    "sns.heatmap(nbcm,annot=True,cmap=\"Oranges\",fmt=\"d\",cbar=False,annot_kws={\"size\": 20})\n",
    "plt.subplot(2,4,4)\n",
    "plt.title(\"Random Forest\")\n",
    "sns.heatmap(rfcm,annot=True,cmap=\"Greens\",fmt=\"d\",cbar=False,annot_kws={\"size\": 20})\n",
    "plt.subplot(2,4,5)\n",
    "plt.title(\"Decision Tree\")\n",
    "sns.heatmap(dtcm,annot=True,cmap=\"Reds\",fmt=\"d\",cbar=False,annot_kws={\"size\": 20})\n",
    "plt.subplot(2,4,6)\n",
    "plt.title(\"KNN\")\n",
    "sns.heatmap(knncm,annot=True,cmap=\"Purples\",fmt=\"d\",cbar=False,annot_kws={\"size\": 20})\n",
    "plt.subplot(2,4,7)\n",
    "plt.title(\"Gradient Boosting\")\n",
    "sns.heatmap(gbcm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False,annot_kws={\"size\": 20})\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
